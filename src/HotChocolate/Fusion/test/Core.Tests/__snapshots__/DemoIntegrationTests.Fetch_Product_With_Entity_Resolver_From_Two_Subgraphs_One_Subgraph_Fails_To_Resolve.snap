User Request
---------------
query Product {
  productById(id: "UHJvZHVjdAppMQ==") {
    name
    reviews {
      body
    }
  }
}
---------------

QueryPlan
---------------
{
  "document": "query Product { productById(id: \u0022UHJvZHVjdAppMQ==\u0022) { name reviews { body } } }",
  "operation": "Product",
  "rootNode": {
    "type": "Sequence",
    "nodes": [
      {
        "type": "Resolve",
        "subgraph": "Reviews",
        "document": "query Product_1 { productById(id: \u0022UHJvZHVjdAppMQ==\u0022) { reviews { body } __fusion_exports__1: id } }",
        "selectionSetId": 0,
        "provides": [
          {
            "variable": "__fusion_exports__1"
          }
        ]
      },
      {
        "type": "Compose",
        "selectionSetIds": [
          0
        ]
      },
      {
        "type": "Resolve",
        "subgraph": "Products",
        "document": "query Product_2($__fusion_exports__1: ID!) { productById(id: $__fusion_exports__1) { name } }",
        "selectionSetId": 1,
        "path": [
          "productById"
        ],
        "requires": [
          {
            "variable": "__fusion_exports__1"
          }
        ]
      },
      {
        "type": "Compose",
        "selectionSetIds": [
          1
        ]
      }
    ]
  },
  "state": {
    "__fusion_exports__1": "Product_id"
  }
}
---------------

QueryPlan Hash
---------------
B61955FA3636E3CD1D730D1CA24D72B0AEBFB447
---------------

Result
---------------
{
  "errors": [
    {
      "message": "Internal Execution Error"
    }
  ],
  "data": {
    "productById": null
  }
}
---------------

Fusion Graph
---------------
schema
  @fusion(version: 1)
  @transport(subgraph: "Products", location: "http:\/\/localhost:5000\/graphql", kind: "HTTP")
  @transport(subgraph: "Products", location: "ws:\/\/localhost:5000\/graphql", kind: "WebSocket")
  @transport(subgraph: "Reviews", location: "http:\/\/localhost:5000\/graphql", kind: "HTTP")
  @transport(subgraph: "Reviews", location: "ws:\/\/localhost:5000\/graphql", kind: "WebSocket")
  @node(subgraph: "Products", types: [ "Product" ])
  @node(subgraph: "Reviews", types: [ "User", "Review" ]) {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
    @variable(subgraph: "Products", name: "id", argument: "id")
    @resolver(subgraph: "Products", select: "{ node(id: $id) }", arguments: [ { name: "id", type: "ID!" } ])
    @variable(subgraph: "Reviews", name: "id", argument: "id")
    @resolver(subgraph: "Reviews", select: "{ node(id: $id) }", arguments: [ { name: "id", type: "ID!" } ])
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
    @variable(subgraph: "Products", name: "ids", argument: "ids")
    @resolver(subgraph: "Products", select: "{ nodes(ids: $ids) }", arguments: [ { name: "ids", type: "[ID!]!" } ])
    @variable(subgraph: "Reviews", name: "ids", argument: "ids")
    @resolver(subgraph: "Reviews", select: "{ nodes(ids: $ids) }", arguments: [ { name: "ids", type: "[ID!]!" } ])
  productById(id: ID!): Product
    @variable(subgraph: "Products", name: "id", argument: "id")
    @resolver(subgraph: "Products", select: "{ productById(id: $id) }", arguments: [ { name: "id", type: "ID!" } ])
    @variable(subgraph: "Reviews", name: "id", argument: "id")
    @resolver(subgraph: "Reviews", select: "{ productById(id: $id) }", arguments: [ { name: "id", type: "ID!" } ])
  reviewById(id: ID!): Review
    @variable(subgraph: "Reviews", name: "id", argument: "id")
    @resolver(subgraph: "Reviews", select: "{ reviewById(id: $id) }", arguments: [ { name: "id", type: "ID!" } ])
  reviewOrAuthor: ReviewOrAuthor!
    @resolver(subgraph: "Reviews", select: "{ reviewOrAuthor }")
  reviews: [Review!]!
    @resolver(subgraph: "Reviews", select: "{ reviews }")
  topProducts(first: Int!): [Product!]!
    @variable(subgraph: "Products", name: "first", argument: "first")
    @resolver(subgraph: "Products", select: "{ topProducts(first: $first) }", arguments: [ { name: "first", type: "Int!" } ])
  userById(id: ID!): User
    @variable(subgraph: "Reviews", name: "id", argument: "id")
    @resolver(subgraph: "Reviews", select: "{ authorById(id: $id) }", arguments: [ { name: "id", type: "ID!" } ])
}

type Mutation {
  addReview(input: AddReviewInput!): AddReviewPayload!
    @variable(subgraph: "Reviews", name: "input", argument: "input")
    @resolver(subgraph: "Reviews", select: "{ addReview(input: $input) }", arguments: [ { name: "input", type: "AddReviewInput!" } ])
  uploadProductPicture(input: UploadProductPictureInput!): UploadProductPicturePayload!
    @variable(subgraph: "Products", name: "input", argument: "input")
    @resolver(subgraph: "Products", select: "{ uploadProductPicture(input: $input) }", arguments: [ { name: "input", type: "UploadProductPictureInput!" } ])
}

type Subscription {
  onNewReview: Review!
    @resolver(subgraph: "Reviews", select: "{ onNewReview }", kind: "SUBSCRIBE")
}

type AddReviewPayload {
  review: Review
    @source(subgraph: "Reviews")
}

type Product implements Node
  @variable(subgraph: "Products", name: "Product_id", select: "id")
  @variable(subgraph: "Reviews", name: "Product_id", select: "id")
  @resolver(subgraph: "Products", select: "{ productById(id: $Product_id) }", arguments: [ { name: "Product_id", type: "ID!" } ])
  @resolver(subgraph: "Reviews", select: "{ productById(id: $Product_id) }", arguments: [ { name: "Product_id", type: "ID!" } ])
  @resolver(subgraph: "Products", select: "{ nodes(ids: $Product_id) { ... on Product { ... Product } } }", arguments: [ { name: "Product_id", type: "[ID!]!" } ], kind: "BATCH") {
  dimension: ProductDimension!
    @source(subgraph: "Products")
  id: ID!
    @source(subgraph: "Products")
    @source(subgraph: "Reviews")
  name: String!
    @source(subgraph: "Products")
  price: Int!
    @source(subgraph: "Products")
  repeat(num: Int!): Int!
    @source(subgraph: "Products")
    @variable(subgraph: "Products", name: "num", argument: "num")
  repeatData(data: SomeDataInput!): SomeData!
    @source(subgraph: "Products")
    @variable(subgraph: "Products", name: "data", argument: "data")
  reviews: [Review!]!
    @source(subgraph: "Reviews")
  weight: Int!
    @source(subgraph: "Products")
}

type ProductDimension {
  size: Int!
    @source(subgraph: "Products")
  weight: Int!
    @source(subgraph: "Products")
}

type ProductNotFoundError implements Error {
  message: String!
    @source(subgraph: "Products")
  productId: Int!
    @source(subgraph: "Products")
}

type Review implements Node
  @variable(subgraph: "Reviews", name: "Review_id", select: "id")
  @resolver(subgraph: "Reviews", select: "{ reviewById(id: $Review_id) }", arguments: [ { name: "Review_id", type: "ID!" } ])
  @resolver(subgraph: "Reviews", select: "{ nodes(ids: $Review_id) { ... on Review { ... Review } } }", arguments: [ { name: "Review_id", type: "[ID!]!" } ], kind: "BATCH") {
  author: User!
    @source(subgraph: "Reviews")
  body: String!
    @source(subgraph: "Reviews")
  id: ID!
    @source(subgraph: "Reviews")
  product: Product!
    @source(subgraph: "Reviews")
}

type SomeData {
  data: SomeData
    @source(subgraph: "Products")
  num: Int
    @source(subgraph: "Products")
}

type UploadProductPicturePayload {
  boolean: Boolean
    @source(subgraph: "Products")
  errors: [UploadProductPictureError!]
    @source(subgraph: "Products")
}

type User implements Node
  @source(subgraph: "Reviews", name: "Author")
  @variable(subgraph: "Reviews", name: "User_id", select: "id")
  @resolver(subgraph: "Reviews", select: "{ authorById(id: $User_id) }", arguments: [ { name: "User_id", type: "ID!" } ])
  @resolver(subgraph: "Reviews", select: "{ nodes(ids: $User_id) { ... on User { ... User } } }", arguments: [ { name: "User_id", type: "[ID!]!" } ], kind: "BATCH") {
  id: ID!
    @source(subgraph: "Reviews")
    @reEncodeId
  name: String!
    @source(subgraph: "Reviews")
  reviews: [Review!]!
    @source(subgraph: "Reviews")
}

interface Error {
  message: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

union ReviewOrAuthor = User | Review

union UploadProductPictureError = ProductNotFoundError

input AddReviewInput {
  authorId: Int!
  body: String!
  upc: Int!
}

input SomeDataInput {
  data: SomeDataInput
  num: Int
}

input UploadProductPictureInput {
  file: Upload!
  productId: Int!
}

"The `Upload` scalar type represents a file upload."
scalar Upload
---------------
